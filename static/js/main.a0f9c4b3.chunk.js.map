{"version":3,"sources":["../node_modules/typescript/lib sync","modules/index.js","components/TopBar.js","components/GridBox.js","components/GridBoard.js","algorithms/daijkstra.js","algorithms/aStar.js","components/Controller.js","App.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","boardCoordinate","Array","forEach","y","x","index","pointType","wall","visited","cost","shortest","Infinity","prev","initialState","startPoint","endPoint","countAxisX","countAxisY","currentSearchPoints","algorithm","visitedPoints","shortestPath","dragTarget","reducer","state","action","type","payload","Object","newBox","point","key","boardCoordinateCopy","cloneDeep","unvisitedPoints","values","filter","el","foundEndPoint","length","searchPoints","sort","a","b","i","currentPoint","push","up","down","neighbors","undefined","lastPoint","reverse","TopBar","className","GridBox","props","useSelector","boxPoint","useEffect","setBoxClass","useState","boxClass","dispatch","useDispatch","updateBox","useCallback","dispatchStartPoint","dispatchEndPoint","dispatchDragTarget","onContextMenu","preventDefault","onClick","onDragEnter","stopPropagation","onDragOver","onDragEnd","onDrop","onMouseEnter","onMouseLeave","replace","draggable","GridBoard","gridList","map","gridBoard","gridRow","getGridBoard","daijkstra","orderCount","order","manhattenDistance","pointOne","pointTwo","dx","Math","abs","dy","sqrt","pow","aStar","openList","closedList","distanceFromStart","heuristicDistance","fValue","open","closed","includes","newCurrentPoint","splice","indexOf","StartButton","startButtonClick","trigger","restartButtonClick","disabled","ResetButton","AlgorithmDropBox","onChange","name","value","Controller","setTrigger","pathCount","setPathCount","shortestPathCount","setShortestPathCount","setElapsedTime","moveCount","setMoveCount","setShortestPath","setVisitedPoints","savedCallback","useRef","callback","current","setInterval","clearInterval","resetState","algorithmType","setAlgorithmType","target","newVisitedPointsResult","newShortestPath","App","store","createStore","rootReducer","composeWithDevTools","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a0f9c4b3.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 102;","import cloneDeep from 'lodash/fp/cloneDeep';\n\nconst countAxisX = 50;\nconst countAxisY = 20;\n\n// initializing boardCoordinate\nconst boardCoordinate = {};\n[...Array(countAxisY).keys()].forEach((y) => {\n  [...Array(countAxisX).keys()].forEach((x) => {\n    boardCoordinate[`${y}-${x}`] = {\n      index: `${y}-${x}`,\n      x: x,\n      y: y,\n      pointType: 'unvisited',\n      wall: false,\n      visited: false,\n      cost: 1,\n      shortest: Infinity, //shortest cost from startPoint\n      prev: null, //previous vertex\n    };\n  });\n});\n\nconst initialState = {\n  boardCoordinate: boardCoordinate,\n  startPoint: '5-5',\n  endPoint: '10-10',\n  countAxisX: countAxisX,\n  countAxisY: countAxisY,\n  currentSearchPoints: [],\n  algorithm: 'dijkstra',\n  visitedPoints: [],\n  shortestPath: [],\n  dragTarget: null,\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'gridBox/setStartPoint': {\n      return {\n        ...state,\n        startPoint: action.payload,\n      };\n    }\n\n    case 'gridBox/setEndPoint': {\n      return {\n        ...state,\n        endPoint: action.payload,\n      };\n    }\n\n    case 'controllor/resetState': {\n      return initialState;\n    }\n\n    case 'controller/updateBox': {\n      const payload = action.payload;\n      const keys = Object.keys(payload);\n      const newBox = {\n        ...state['boardCoordinate'][action.payload.point],\n      };\n      keys.forEach((key) => {\n        newBox[key] = payload[key];\n      });\n      return {\n        ...state,\n        boardCoordinate: {\n          ...state['boardCoordinate'],\n          [action.payload.point]: newBox,\n        },\n      };\n    }\n\n    case 'controller/updateShortestPath': {\n      switch (action.payload.algorithm) {\n        case 'Daijkstra': {\n          const visitedPoints = [];\n          const { startPoint, endPoint } = state;\n          const boardCoordinateCopy = cloneDeep(state.boardCoordinate);\n          boardCoordinateCopy[startPoint] = {\n            ...boardCoordinateCopy[startPoint],\n            shortest: 0,\n          };\n          let unvisitedPoints = Object.values(boardCoordinateCopy).filter(\n            (el) => {\n              return el.pointType === 'unvisited' && el.shortest !== Infinity;\n            }\n          );\n          let foundEndPoint = false;\n          while (unvisitedPoints.length >= 1 && foundEndPoint === false) {\n            const searchPoints = unvisitedPoints.sort(function (a, b) {\n              if (a.shortest >= b.shortest) {\n                return 1;\n              } else {\n                return -1;\n              }\n            });\n            for (let i = 0; i < searchPoints.length; i++) {\n              const currentPoint = searchPoints[i];\n              if (currentPoint.index === endPoint) {\n                foundEndPoint = true;\n                break;\n              } else {\n                boardCoordinateCopy[currentPoint.index].pointType = 'visited';\n                visitedPoints.push(currentPoint);\n                const x = currentPoint.x;\n                const y = currentPoint.y;\n                const up = `${y + 1}-${x}`;\n                const down = `${y - 1}-${x}`;\n                const left = `${y}-${x - 1}`;\n                const right = `${y}-${x + 1}`;\n                const neighbors = [left, up, down, right].filter(\n                  (point) =>\n                    boardCoordinateCopy[point] !== undefined &&\n                    boardCoordinateCopy[point].pointType === 'unvisited'\n                );\n                if (neighbors.length > 0) {\n                  neighbors.forEach((point) => {\n                    if (\n                      boardCoordinateCopy[point].shortest >\n                      boardCoordinateCopy[point].cost + currentPoint.shortest\n                    ) {\n                      boardCoordinateCopy[point].shortest =\n                        currentPoint.shortest;\n                      boardCoordinateCopy[point].prev = currentPoint.index;\n                    }\n                  });\n                }\n              }\n            }\n            unvisitedPoints = Object.values(boardCoordinateCopy).filter(\n              (el) => {\n                return el.pointType === 'unvisited' && el.shortest !== Infinity;\n              }\n            );\n          }\n\n          const shortestPath = [];\n          let lastPoint = endPoint;\n          while (lastPoint !== null) {\n            if (boardCoordinateCopy[lastPoint] !== undefined) {\n              lastPoint = boardCoordinateCopy[lastPoint].prev;\n              if (lastPoint !== null) {\n                shortestPath.push(lastPoint);\n                boardCoordinateCopy[lastPoint].pointType = 'path';\n              }\n            } else {\n              lastPoint = null;\n            }\n          }\n          shortestPath.reverse();\n          return {\n            ...state,\n            visitedPoints: visitedPoints,\n            shortestPath: shortestPath,\n          };\n          console.log('visited path', visitedPoints);\n          console.log('shortest path', shortestPath);\n        }\n        default:\n          return state;\n      }\n    }\n\n    case 'updateDragTarget': {\n      const payload = action.payload;\n      return {\n        ...state,\n        dragTarget: payload,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React from 'react';\n\nconst TopBar = () => {\n  const mainDiv = (\n    <article id=\"topbar\">\n      <section className=\"title\">Danny's Pathfinder</section>\n    </article>\n  );\n  return mainDiv;\n};\n\nexport default TopBar;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst GridBox = (props) => {\n  const { x, y, pointType, visited, wall } = props;\n  const { startPoint, endPoint, dragTarget } = useSelector(\n    ({ startPoint, endPoint, dragTarget }) => ({\n      startPoint,\n      endPoint,\n      dragTarget,\n    })\n  );\n  const boxPoint = `${y}-${x}`;\n  useEffect(() => {\n    if (pointType === 'path') {\n      setBoxClass('box path');\n    } else if (pointType === 'unvisited') {\n      setBoxClass('box');\n    } else if (pointType === 'visited') {\n      setBoxClass('box visited');\n    } else if (pointType === 'wall') {\n      setBoxClass('box wall');\n    }\n\n    if (boxPoint === startPoint) {\n      setBoxClass('box start-point');\n    } else if (boxPoint === endPoint) {\n      setBoxClass('box end-point');\n    }\n  }, [startPoint, endPoint, boxPoint, pointType, wall, visited]);\n  const [boxClass, setBoxClass] = useState('box');\n\n  const { boardCoordinate } = useSelector(({ boardCoordinate }) => ({\n    boardCoordinate: boardCoordinate,\n  }));\n\n  const dispatch = useDispatch();\n\n  const updateBox = useCallback(\n    (payload) =>\n      dispatch({\n        type: 'controller/updateBox',\n        payload: payload,\n      }),\n    [dispatch]\n  );\n\n  const dispatchStartPoint = useCallback(\n    (payload) => {\n      dispatch({\n        type: 'gridBox/setStartPoint',\n        payload: payload,\n      });\n    },\n    [dispatch]\n  );\n\n  const dispatchEndPoint = useCallback(\n    (payload) => {\n      dispatch({\n        type: 'gridBox/setEndPoint',\n        payload: payload,\n      });\n    },\n    [dispatch]\n  );\n\n  const mouseEnter = () => {\n    setBoxClass(boxClass + ' hover');\n  };\n  const mouseLeave = () => {\n    setBoxClass(boxClass.replace(' hover', ''));\n  };\n  const rightMouseClick = (e) => {\n    e.preventDefault();\n    dispatchEndPoint(boxPoint);\n    // setBoxClass(\"box start-point\");\n  };\n\n  const onClick = (e) => {\n    e.preventDefault();\n    updateBox({\n      point: boxPoint,\n      pointType:\n        boardCoordinate[boxPoint]['pointType'] === 'wall'\n          ? 'unvisited'\n          : 'wall',\n    });\n  };\n  const dispatchDragTarget = useCallback((payload) =>\n    dispatch({\n      type: 'updateDragTarget',\n      payload: payload,\n    })\n  );\n\n  const onDragEnter = (e) => {\n    e.stopPropagation();\n    e.preventDefault();\n    if (boxPoint === startPoint) {\n      dispatchDragTarget('startPoint');\n    } else if (boxPoint === endPoint) {\n      dispatchDragTarget('endPoint');\n    } else if (dragTarget === null) {\n      updateBox({\n        point: boxPoint,\n        pointType:\n          boardCoordinate[boxPoint]['pointType'] === 'wall'\n            ? 'unvisited'\n            : 'wall',\n      });\n    }\n  };\n\n  const onDragOver = (e) => {\n    // The default action for dragOver is \"Reset the current drag operation to none\".\n    e.preventDefault();\n  };\n\n  const onDragEnd = (e) => {\n    e.preventDefault();\n    dispatchDragTarget(null);\n  };\n\n  const onDrop = (e) => {\n    if (dragTarget === 'startPoint') {\n      dispatchStartPoint(boxPoint);\n    } else if (dragTarget === 'endPoint') {\n      dispatchEndPoint(boxPoint);\n    }\n  };\n  return (\n    <div\n      id={`column ${boxPoint}`}\n      className={boxClass}\n      onContextMenu={rightMouseClick}\n      onClick={onClick}\n      onDragEnter={onDragEnter}\n      onDragOver={onDragOver}\n      onDragEnd={onDragEnd}\n      onDrop={onDrop}\n      onMouseEnter={mouseEnter}\n      onMouseLeave={mouseLeave}\n      draggable={true}\n    ></div>\n  );\n};\n\nexport default GridBox;\n","import React from 'react';\nimport GridBox from './GridBox';\nimport { useSelector } from 'react-redux';\n\nconst GridBoard = () => {\n  const { countAxisX, countAxisY } = useSelector(\n    ({ countAxisX, countAxisY }) => ({\n      countAxisX: countAxisX,\n      countAxisY: countAxisY,\n    })\n  );\n\n  const { boardCoordinate } = useSelector(({ boardCoordinate }) => ({\n    boardCoordinate: boardCoordinate,\n  }));\n\n  const gridList = Object.keys(boardCoordinate).map((point) => {\n    const { x, y, pointType, visited, wall, cost } = boardCoordinate[point];\n    const key = `${y}-${x}`;\n    const gridBox = (\n      <GridBox\n        x={x}\n        y={y}\n        pointType={pointType}\n        visited={visited}\n        wall={wall}\n        cost={cost}\n        key={key}\n      ></GridBox>\n    );\n    return gridBox;\n  });\n\n  const getGridBoard = () => {\n    const gridBoard = [];\n    [...Array(countAxisY).keys()].forEach((y) => {\n      const gridRow = gridList.filter((el) => el.props.y === y);\n      gridBoard.push(\n        <div className=\"row\" key={`row-${y}`}>\n          {gridRow}\n        </div>\n      );\n    });\n    return gridBoard;\n  };\n\n  return <section className=\"grid-board\">{getGridBoard()}</section>;\n};\n\nexport default GridBoard;\n","import { cloneDeep } from 'lodash';\n\nconst daijkstra = (boardCoordinate, startPoint, endPoint) => {\n  const visitedPoints = [];\n  const boardCoordinateCopy = cloneDeep(boardCoordinate);\n  let orderCount = 0;\n  boardCoordinateCopy[startPoint] = {\n    ...boardCoordinateCopy[startPoint],\n    shortest: 0,\n    order: orderCount,\n  };\n  orderCount = +1;\n  let unvisitedPoints = Object.values(boardCoordinateCopy).filter((el) => {\n    return el.pointType === 'unvisited' && el.shortest !== Infinity;\n  });\n  let foundEndPoint = false;\n  while (unvisitedPoints.length >= 1 && foundEndPoint === false) {\n    const searchPoints = unvisitedPoints.sort(function (a, b) {\n      if (a.shortest >= b.shortest) {\n        return 1;\n      } else {\n        return -1;\n      }\n    });\n    for (let i = 0; i < searchPoints.length; i++) {\n      const currentPoint = searchPoints[i];\n      if (currentPoint.index === endPoint) {\n        foundEndPoint = true;\n        break;\n      } else {\n        boardCoordinateCopy[currentPoint.index].pointType = 'visited';\n        boardCoordinateCopy[currentPoint.index].order = orderCount;\n        orderCount += 1;\n        visitedPoints.push(currentPoint);\n        const x = currentPoint.x;\n        const y = currentPoint.y;\n        const up = `${y + 1}-${x}`;\n        const down = `${y - 1}-${x}`;\n        const left = `${y}-${x - 1}`;\n        const right = `${y}-${x + 1}`;\n        const neighbors = [left, up, down, right].filter(\n          (point) =>\n            boardCoordinateCopy[point] !== undefined &&\n            boardCoordinateCopy[point].pointType === 'unvisited'\n        );\n        if (neighbors.length > 0) {\n          neighbors.forEach((point) => {\n            if (\n              boardCoordinateCopy[point].shortest >\n              boardCoordinateCopy[point].cost + currentPoint.shortest\n            ) {\n              boardCoordinateCopy[point].shortest = currentPoint.shortest;\n              boardCoordinateCopy[point].prev = currentPoint.index;\n            }\n          });\n        }\n      }\n    }\n    unvisitedPoints = Object.values(boardCoordinateCopy).filter((el) => {\n      return el.pointType === 'unvisited' && el.shortest !== Infinity;\n    });\n  }\n\n  const shortestPath = [];\n  let lastPoint = endPoint;\n  while (lastPoint !== null) {\n    if (boardCoordinateCopy[lastPoint] !== undefined) {\n      lastPoint = boardCoordinateCopy[lastPoint].prev;\n      if (lastPoint !== null) {\n        shortestPath.push(lastPoint);\n        boardCoordinateCopy[lastPoint].pointType = 'path';\n        // boardCoordinateCopy[lastPoint].order = orderCount;\n        orderCount += 1;\n      }\n    } else {\n      lastPoint = null;\n    }\n  }\n  shortestPath.reverse();\n  return {\n    visitedPoints: visitedPoints,\n    shortestPath: shortestPath,\n  };\n};\n\nexport default daijkstra;\n","import { cloneDeep } from 'lodash';\nimport { forEachChild } from 'typescript';\n\nconst manhattenDistance = (pointOne, pointTwo, boardCoordinateCopy) => {\n  let dx = Math.abs(\n    boardCoordinateCopy[pointOne].x - boardCoordinateCopy[pointTwo].x\n  );\n  let dy = Math.abs(\n    boardCoordinateCopy[pointOne].y - boardCoordinateCopy[pointTwo].y\n  );\n  return Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n};\n\nconst euclideanDistance = (pointOne, pointTwo, boardCoordinateCopy) => {\n  let dx = boardCoordinateCopy[pointOne].x - boardCoordinateCopy[pointTwo].x;\n  let dy = boardCoordinateCopy[pointOne].y - boardCoordinateCopy[pointTwo].y;\n  return Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n};\n\nconst aStar = (boardCoordinate, startPoint, endPoint) => {\n  const boardCoordinateCopy = cloneDeep(boardCoordinate);\n  const visitedPoints = [];\n  const shortestPath = [];\n  const openList = [];\n  const closedList = [];\n  boardCoordinateCopy[startPoint] = {\n    ...boardCoordinateCopy[startPoint],\n    distanceFromStart: 0,\n    heuristicDistance: 0,\n    fValue: null,\n    open: false,\n    closed: false,\n    prev: null,\n  };\n  let currentPoint = boardCoordinateCopy[startPoint];\n  while (currentPoint.index !== endPoint) {\n    const neighbors = ((currentPoint) => {\n      const x = currentPoint.x;\n      const y = currentPoint.y;\n      const up = `${y + 1}-${x}`;\n      const down = `${y - 1}-${x}`;\n      const left = `${y}-${x - 1}`;\n      const right = `${y}-${x + 1}`;\n      return [left, up, down, right].filter(\n        (point) =>\n          boardCoordinateCopy[point] !== undefined &&\n          boardCoordinateCopy[point].pointType === 'unvisited'\n      );\n    })(currentPoint);\n    neighbors.forEach((point) => {\n      if (!openList.includes(point) && !closedList.includes(point)) {\n        openList.push(point);\n        const distanceFromStart =\n          Math.abs(\n            boardCoordinateCopy[startPoint].x - boardCoordinateCopy[point].x\n          ) +\n          Math.abs(\n            boardCoordinateCopy[startPoint].y - boardCoordinateCopy[point].y\n          );\n        // http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html#S7\n        const heuristicDistance = manhattenDistance(\n          endPoint,\n          point,\n          boardCoordinateCopy\n        );\n        const fValue = distanceFromStart + heuristicDistance;\n\n        if (\n          fValue < boardCoordinateCopy[point].fValue ||\n          boardCoordinateCopy[point].fValue === undefined\n        ) {\n          boardCoordinateCopy[point].distanceFromStart = distanceFromStart;\n          boardCoordinateCopy[point].heuristicDistance = heuristicDistance;\n          boardCoordinateCopy[point].fValue = fValue;\n          boardCoordinateCopy[point].prev = currentPoint.index;\n        }\n      }\n    });\n    closedList.push(currentPoint.index);\n    const newCurrentPoint = ((openList) => {\n      const openListPoints = openList.map((point) => {\n        return boardCoordinateCopy[point];\n      });\n      const sortList = openListPoints.sort((a, b) => {\n        if (a.fValue <= b.fValue) {\n          return -1;\n        } else {\n          return 1;\n        }\n      });\n      return sortList[0];\n    })(openList);\n    openList.splice(openList.indexOf(newCurrentPoint.index), 1);\n    visitedPoints.push(currentPoint);\n    currentPoint = newCurrentPoint;\n  }\n  let prev = boardCoordinateCopy[endPoint].prev;\n  while (prev != null) {\n    shortestPath.push(prev);\n    prev = boardCoordinateCopy[prev].prev;\n  }\n  shortestPath.reverse();\n  return {\n    visitedPoints: visitedPoints,\n    shortestPath: shortestPath,\n  };\n};\nexport default aStar;\n","import React, { useState, useCallback, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport daijkstra from '../algorithms/daijkstra';\nimport aStar from '../algorithms/aStar';\n\nconst StartButton = ({ startButtonClick, restartButtonClick, trigger }) => {\n  return (\n    <div className=\"button-wrap\">\n      <button\n        className=\"button start\"\n        onClick={startButtonClick}\n        disabled={trigger}\n      >\n        START\n      </button>\n    </div>\n  );\n};\n\nconst ResetButton = ({ onClick }) => {\n  return (\n    <div className=\"button-wrap\">\n      <button className=\"button reset\" onClick={onClick}>\n        RESET\n      </button>\n    </div>\n  );\n};\n\nconst AlgorithmDropBox = ({ onChange }) => {\n  return (\n    <div className=\"button-wrap\">\n      <form>\n        {/* <label htmlFor=\"algorithm\">algorithm:</label> */}\n        <select\n          className=\"select-container\"\n          name=\"algorithm\"\n          onChange={onChange}\n        >\n          <option value=\"A-star\">A-star</option>\n          <option value=\"Daijkstra\">Daijkstra</option>\n        </select>\n      </form>\n    </div>\n  );\n};\n\nconst Controller = () => {\n  const { boardCoordinate, startPoint, endPoint } = useSelector(\n    ({ boardCoordinate, startPoint, endPoint }) => ({\n      boardCoordinate: boardCoordinate,\n      startPoint: startPoint,\n      endPoint: endPoint,\n    })\n  );\n  const dispatch = useDispatch();\n  const updateBox = useCallback(\n    (payload) =>\n      dispatch({\n        type: 'controller/updateBox',\n        payload: payload,\n      }),\n    [dispatch]\n  );\n\n  const updateBoxType = useCallback(\n    (payload) => {\n      dispatch({\n        type: 'gridBoard/updateBoxType',\n        payload: payload,\n      });\n    },\n    [dispatch]\n  );\n  const [trigger, setTrigger] = useState(false);\n  const [pathCount, setPathCount] = useState(0);\n  const [shortestPathCount, setShortestPathCount] = useState(0);\n  const [elapsedTime, setElapsedTime] = useState('00:00:00');\n  const [moveCount, setMoveCount] = useState(0);\n\n  const [shortestPath, setShortestPath] = useState([]);\n  const [visitedPoints, setVisitedPoints] = useState([]);\n\n  const savedCallback = useRef();\n  function callback() {\n    if (visitedPoints[pathCount] != undefined) {\n      updateBox({\n        point: visitedPoints[pathCount].index,\n        pointType: 'visited',\n      });\n      setMoveCount(moveCount + 1);\n      setPathCount(pathCount + 1);\n    } else {\n      updateBox({\n        point: shortestPath[shortestPathCount],\n        pointType: 'path',\n      });\n      setShortestPathCount(shortestPathCount + 1);\n    }\n  }\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (trigger) {\n      let id = setInterval(tick, 3);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [trigger]);\n\n  const startButtonClick = () => {\n    const {\n      visitedPoints: newVisitedPointsResult,\n      shortestPath: newShortestPath,\n    } = ((algorithmType) => {\n      if (algorithmType === 'Daijkstra') {\n        return daijkstra(boardCoordinate, startPoint, endPoint);\n      } else if (algorithmType === 'A-star') {\n        return aStar(boardCoordinate, startPoint, endPoint);\n      }\n    })(algorithmType);\n    setVisitedPoints(newVisitedPointsResult);\n    setShortestPath(newShortestPath);\n    setTrigger(true);\n  };\n\n  const restartButtonClick = () => {\n    setTrigger(false);\n  };\n\n  const resetState = useCallback(() => {\n    dispatch({\n      type: 'controllor/resetState',\n    });\n  }, [dispatch]);\n\n  const resetButtonClick = () => {\n    setTrigger(false);\n    setPathCount(0);\n    setShortestPathCount(0);\n    setMoveCount(0);\n    setElapsedTime('00:00:00');\n    resetState();\n  };\n  const [algorithmType, setAlgorithmType] = useState('A-star');\n  const algorithmTypeChange = (e) => {\n    setAlgorithmType(e.target.value);\n  };\n\n  return (\n    <section id=\"controller\">\n      <div className=\"right\">\n        <AlgorithmDropBox onChange={algorithmTypeChange}></AlgorithmDropBox>\n        <StartButton\n          startButtonClick={startButtonClick}\n          restartButtonClick={restartButtonClick}\n          trigger={trigger}\n        />\n        <ResetButton onClick={resetButtonClick} />\n        <div className=\"counter\">\n          {/* <div className=\"counter-box\">\n                        <p className=\"elapsed-time\">{elapsedTime}</p>\n                    </div> */}\n          <div className=\"counter-box\">\n            <p className=\"move-counter\">{moveCount}</p>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Controller;\n","import React from 'react';\nimport TopBar from './components/TopBar';\nimport GridBoard from './components/GridBoard';\nimport Controller from './components/Controller';\n\nconst App = () => {\n  return (\n    <div>\n      <header>\n        <TopBar />\n      </header>\n      <main>\n        <article>\n          <Controller />\n          <GridBoard />\n        </article>\n      </main>\n    </div>\n  );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { Provider } from 'react-redux';\nimport rootReducer from './modules';\nimport App from './App';\nimport './scss/App.scss';\n\nconst store = createStore(rootReducer, composeWithDevTools());\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}